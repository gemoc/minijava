/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.minijava.semantics.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith
import org.tetrabox.minijava.semantics.tests.util.MiniJavaTestUtil
import org.tetrabox.minijava.xtext.tests.MiniJavaInjectorProvider

import static org.tetrabox.minijava.semantics.tests.util.MiniJavaTestUtil.*
import org.tetrabox.minijava.semantics.tests.util.MiniJavaValueEquals.ObjectTemplate
import java.util.HashMap

@RunWith(XtextRunner)
@InjectWith(MiniJavaInjectorProvider)
class MiniJavaSemanticsPolymorphismTests {
	@Inject
	extension MiniJavaTestUtil testUtil

	@Test
	def void interface_implementation_one_level() {
		genericStatementPrintTest("I i = new X(); i.hello();", "hello")
	}

	@Test
	def void interface_implementation_three_levels() {
		genericStatementPrintTest("I i = new Z(); i.hello(); i.hello(); i.hello();", "hello", "hello", "hello")
	}

	@Test
	def void abstract_implementation_one_level() {
		genericStatementPrintTest("Y y = new Z(); y.ymethod();", "ymethod")
	}

	@Test
	def void override_one_level() {
		genericExpressionTest("Z z = new Z();", "int", "z.identity(2)", 3)
	}

	@Test
	def void no_override() {
		genericStatementPrintTest("Z z = new Z(); z.hello();", "hello")
	}

}
