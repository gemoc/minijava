<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?eclipse version="3.4"?><plugin>
  <extension point="org.eclipse.gemoc.gemoc_language_workbench.xdsml">
    <XDSML_Definition modelLoader_class="org.eclipse.gemoc.executionframework.extensions.sirius.modelloader.DefaultModelLoader" name="org.tetrabox.minijava.XMiniJava" xdsmlFilePath="/org.tetrabox.minijava.dsl/src/org/tetrabox/minijava/dsl/MiniJava.melange"/>
  </extension>
  <extension point="org.eclipse.emf.ecore.generated_package">
    <!-- @generated XMiniJavaMT -->
    <package class="org.tetrabox.minijava.xminijavamt.miniJava.MiniJavaPackage" genModel="model-gen/XMiniJavaMT.genmodel" uri="http://org.tetrabox.minijava.xminijavamt/miniJava/"/>
  </extension>
  <extension point="org.eclipse.emf.ecore.generated_package">
    <!-- @generated MiniJavaMT -->
    <package class="org.tetrabox.minijava.minijavamt.miniJava.MiniJavaPackage" genModel="model-gen/MiniJavaMT.genmodel" uri="http://org.tetrabox.minijava.minijavamt/miniJava/"/>
  </extension>
  
<extension point="fr.inria.diverse.melange.modeltype">
    <modeltype id="org.tetrabox.minijava.MiniJavaMT" uri="http://org.tetrabox.minijava.minijavamt/"/>
    <modeltype id="org.tetrabox.minijava.XMiniJavaMT" uri="http://org.tetrabox.minijava.xminijavamt/">
      <subtyping modeltypeId="org.tetrabox.minijava.MiniJavaMT"/>
    </modeltype>
  </extension>
  <extension point="fr.inria.diverse.melange.language">
    <language aspects="" entryPoints="" exactType="org.tetrabox.minijava.MiniJavaMT" id="org.tetrabox.minijava.MiniJava" uri="http://www.example.org/minijava/MiniJava"/>
    <language aspects="Null:org.tetrabox.minijava.xminijava.aspects.NullAspect;Multiplication:org.tetrabox.minijava.xminijava.aspects.MultiplicationAspect;Or:org.tetrabox.minijava.xminijava.aspects.OrAspect;ClassRef:org.tetrabox.minijava.xminijava.aspects.ClassRefAspect;TypeRef:org.tetrabox.minijava.xminijava.aspects.TypeRefAspect;Assignment:org.tetrabox.minijava.xminijava.aspects.AssigmentAspect;IfStatement:org.tetrabox.minijava.xminijava.aspects.IfStatementAspect;ArrayAccess:org.tetrabox.minijava.xminijava.aspects.ArrayAccessAspect;NullValue:org.tetrabox.minijava.xminijava.aspects.NullValueAspect;SymbolRef:org.tetrabox.minijava.xminijava.aspects.SymbolRefAspect;BooleanValue:org.tetrabox.minijava.xminijava.aspects.BooleanValueToStringAspect,org.tetrabox.minijava.xminijava.aspects.BooleanValueAspect;This:org.tetrabox.minijava.xminijava.aspects.ThisAspect;Equality:org.tetrabox.minijava.xminijava.aspects.EqualityAspect;StringValue:org.tetrabox.minijava.xminijava.aspects.StringValueAspect,org.tetrabox.minijava.xminijava.aspects.StringValueToStringAspect;Plus:org.tetrabox.minijava.xminijava.aspects.PlusAspect;Program:org.tetrabox.minijava.xminijava.aspects.ProgramAspect;ObjectRefValue:org.tetrabox.minijava.xminijava.aspects.ObjectRefValueAspect,org.tetrabox.minijava.xminijava.aspects.ObjectRefValueToStringAspect;ArrayRefValue:org.tetrabox.minijava.xminijava.aspects.ArrayRefValueAspect;ArrayLength:org.tetrabox.minijava.xminijava.aspects.ArrayLengthAspect;Method:org.tetrabox.minijava.xminijava.aspects.MethodSortofStatementAspect,org.tetrabox.minijava.xminijava.aspects.MethodAspect;Not:org.tetrabox.minijava.xminijava.aspects.NotAspect;And:org.tetrabox.minijava.xminijava.aspects.AndAspect;State:org.tetrabox.minijava.xminijava.aspects.StateAspect;Value:org.tetrabox.minijava.xminijava.aspects.ValueToStringAspect,org.tetrabox.minijava.xminijava.aspects.ValueAspect;Block:org.tetrabox.minijava.xminijava.aspects.BlockAspect;InferiorOrEqual:org.tetrabox.minijava.xminijava.aspects.InferiorOrEqualAspect;StringConstant:org.tetrabox.minijava.xminijava.aspects.StringConstantAspect;Minus:org.tetrabox.minijava.xminijava.aspects.MinusAspect;Inequality:org.tetrabox.minijava.xminijava.aspects.InequalityAspect;Frame:org.tetrabox.minijava.xminijava.aspects.FrameAspect;NewObject:org.tetrabox.minijava.xminijava.aspects.NewObjectAspect;WhileStatement:org.tetrabox.minijava.xminijava.aspects.WhileStatementAspect;MethodCall:org.tetrabox.minijava.xminijava.aspects.MethodCallExpressionAspect;Superior:org.tetrabox.minijava.xminijava.aspects.SuperiorAspect;PrintStatement:org.tetrabox.minijava.xminijava.aspects.PrintStatementAspect;IntConstant:org.tetrabox.minijava.xminijava.aspects.IntConstantAspect;Division:org.tetrabox.minijava.xminijava.aspects.DivisionAspect;ForStatement:org.tetrabox.minijava.xminijava.aspects.ForStatementAspect;Context:org.tetrabox.minijava.xminijava.aspects.ContextAspect;BoolConstant:org.tetrabox.minijava.xminijava.aspects.BoolConstantAspect;Return:org.tetrabox.minijava.xminijava.aspects.ReturnAspect;Statement:org.tetrabox.minijava.xminijava.aspects.StatementAspect;IntegerValue:org.tetrabox.minijava.xminijava.aspects.IntegerValueAspect,org.tetrabox.minijava.xminijava.aspects.IntegerValueToStringAspect;Inferior:org.tetrabox.minijava.xminijava.aspects.InferiorAspect;SuperiorOrEqual:org.tetrabox.minijava.xminijava.aspects.SuperiorOrEqualAspect;Neg:org.tetrabox.minijava.xminijava.aspects.NegAspect;NewArray:org.tetrabox.minijava.xminijava.aspects.NewArrayAspect;Expression:org.tetrabox.minijava.xminijava.aspects.ExpressionStatementAspect,org.tetrabox.minijava.xminijava.aspects.ExpressionAspect;Parameter:org.tetrabox.minijava.xminijava.aspects.ParameterAspect;FieldAccess:org.tetrabox.minijava.xminijava.aspects.FieldAccessAspect" entryPoints="org.tetrabox.minijava.xminijava.aspects.ProgramAspect.main(org.tetrabox.minijava.xminijava.miniJava.Program)" exactType="org.tetrabox.minijava.XMiniJavaMT" id="org.tetrabox.minijava.XMiniJava" uri="http://org.tetrabox.minijava.xminijava/miniJava/">
    </language>
  </extension>
</plugin>
